// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id       String @id @default(cuid())
    username String @unique
    email    String @unique
    password String

    posts    Post[]
    votes    Vote[]
    comments Comment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts Account[]
    sessions Session[]

    subs       Sub[]
    moderators Sub[] @relation("moderators")
}

model Post {
    id        String  @id @default(cuid())
    title     String
    text      String?
    image     String?
    points    Int     @default(0)
    creatorId String
    nsfw      Boolean @default(false)

    creator User @relation(fields: [creatorId], references: [id])

    votes    Vote[]
    comments Comment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sub     Sub    @relation(fields: [subName], references: [name])
    subName String

    @@unique([id, creatorId])
}

model Vote {
    id    String? @default(cuid())
    value Int

    userId String
    user   User   @relation(fields: [userId], references: [id])

    postId String
    post   Post   @relation(fields: [postId], references: [id])

    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?

    @@id([userId, postId])
}

model Comment {
    id      String  @id @default(cuid())
    message String
    edited  Boolean @default(false)

    votes Vote[]

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    comment   Comment?  @relation("Reply", fields: [commentId], references: [id], onDelete: Cascade)
    replies   Comment[] @relation("Reply")
    commentId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, userId])
}

model Sub {
    id          String @id @default(cuid())
    name        String @unique
    description String

    posts      Post[]
    users      User[]
    moderators User[] @relation("moderators")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
